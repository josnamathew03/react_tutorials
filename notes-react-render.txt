078- react render intro:
    why render
    why re render
    optimize rendering
    incorrect optimizationcs

------------------------------------------------

079- rendering in react:
when we run a react app the code written in component is converted to react elements which is rendered in to the DOM
NB: initial render process
two phases are render phase and commit phase
render phase:
    react starts at root of the compoenent  treer and goes downwards to the leaf components
    while traversing react invokes createelement method which converts the jsx to react elements and stores the render outputs
    react elements are js objects that describes the structure of your ui
    once the conversion to react elements is done for the entire compoennts all react elements are given to commit phase 

commit phase:
    react elements are applied to the DOM using react DOM package


NB: re render phase

render phase:
    starts from root node and check for compoennts which is flagged as needing updates as compoennt, a component is flagged by calling a usestate render function  or usereduccer dispatch function
    for each of the flagged compoennts invokes createelement method which converts the jsx to react elements and stores the render outputs
    perform reconcillation : once it is done for each of the flagged compoenents the components affected by the flag compoenents , react compares new set of react elements(new render) with the previous render
    a list is created waith all the changes that needs to make to the dom and handed over to commit phase
    in commit phase changes are applied to the dom 

    rendering is not as updating the node

    during  rendering if the same changes is applied as the previous render then it is discarded and no change is applied to the dom

commit phase:
react elements are applied to the DOM using react DOM package

commit phase is usually fast but rendering can be slow

------------------------------------------------

080 - useState:
because of strict mode encouraged by create-react-app in indexe.js we can React.StrictMode . because of this while we  do console.log it is coming twice. ie it intentionaly double ivoke app component only in development mode
to flag the compoent for rerender is calling the setter function from useState
ie what we have done by onclick and setting the count
after the initial render iif you call the setter function and set the state to same value system wont re render
if same value is given after re-render reract will render that specific component one more time and then bails out form any subsequent renders
use state must pass or return a new referencfe as the state value, it has to be a new string boolean or number if the state is primitive type else  react will simply bail out of the component

------------------------------------------------

❌❌ 081- useReducer render:
starting with component tree we saw reducer hook dispatch func is called and it is flagged 
during render phase react go through the components and identify the flagged components and sees reducer is the only function that needs an update
usees createElement method to cinvert the jsx to react Element, 
produce the diff created from the previous render to new render
hand it over to commit phase where changes are applied to the DOM

if youre updating the value to the same value after initial render component wont re render
if youre updaring the calue to the same value after rendering it render one  more time and then bails out of the subsequent renders
 
------------------------------------------------

082 - state immutability:
rendering behaviour when working with objects and arays
when we use objject as a state the reference must cahnge for the component to queue a re render after comparing the old and the new state
to solve this we have create a new object spread the person object and then update this new objet and passw this new object to the setter function

the case is same while dealing with array too

-mutating an objecty or array as state will not cause re render when used wit the useState or useReducer hook
-to render make a copy and modify as necessary and trhen pass the new state to the setter  function
-directly mutating may cause bugs 

------------------------------------------------

083- parent and child re render:
as default rendering behaviour of react as parent compoennt render it recursively re render all its child compoennts
re render
1: new state differ from old state, setter function cause parent compoenent to re render which in turn cause the child compoennt to re render, but DOM represented by child component is never updated
2: new state same as old
 2a:after initial render- the parent component bails out from re rendeing so child wont re render
 2b:after re render- the parent com parent re rejder once again and then in subsequent re renders it bails out of the re render, child is unafedted by the re renders

 same goes for useReducer too

child compoenent went through the render phase but not the commit phase - unnecessary render - it affect performance

------------------------------------------------

084- same element referernce:
technique to avoid unneccessary renders discussed in 84
 include the child compoennt as component definition while using it in App.js and use it as children
child component is just a prop not a nested component
components can change state not props
if component are passed as props child re render at first and then not

--------------------------------------------------

085-  react memo:
let react knoe it dhould re render child compoennt only if its states changed- done using rect.memo
it performs a shallow comparison between prevous and new props and re render the child only if the props have changed

------------------------------------------------------

086- questions on optimization
  -when to use Element reference and  when to use React.memo
  same element reference :
  when child component re render because of change in parent component
  do not work it parent re renders because of changes in its props
  React.memo
  when your child compoenent is being asked to re render due to changes in the parents statte which do not affect the child compoennt props in anyway

-why not wrap every compoennt with React.memo or why cant we memoize intertnally
  shallow comparison arent fre. they are Object(prop count). they buy something if its bails out
  all comparison which end up in re rendering is wasted

when you optimize the rendering of one compoennt, react will also skip renddering that compoennts entire subtree because its effectively stopppin gthe default render children recursively behavior of react

-------------------------------------------------------

087 - incorrect memo with children:
props.children is always a new reference which cause the child compoennt always re render
the Memoized child compoennt itself has child component ie string in her which always cause re render. so no need to wrap and check for rendering

------------------------------------------------------

088- incorrect memo with impure component
IncorrectChild2.js 
while re rendering ui we want to render time too but isnt happening

------------------------------------------------------

089-Incorrect memo with props reference:
we are passing an object as props, because of that everytime the parent re render a new person o=object is created so the child also get re rendered even if they are memoized
functions also has similar effects

------------------------------------------------------

090-useMemo and useCallback:
we can overcome problem in 089 with calback.
fixing new object references while re rendering:
crerate a Memoized version of person obejct 
useMemo takes first argumeb=nt the funtion to be memoized , second argument is the dependency list

fixing new funtion references while re rendering:
give a Memoized version of function using useCallback which takes the function as first argument and second argument is dependency list

------------------------------------------------------

091 - context:

ways to rerender:
  component calls useState settert function or useReducer dispatch function 
  if parent compoennt re-renders
  react context

consider a scenerio where context is used  
When the context value changes, all components that consume that context will re-render (even if they’re wrapped in React.memo).
if components are not wrapped in  memo all the children components  get re rendered since it is the default behaviour

------------------------------------------------------

092- context and render:
wrap the compoennt used by context provider with react memo states update in the parent component will only re render componentr whivh use context value not every children compoennt

------------------------------------------------------

093 - context and same Element reference:
insteaf of using memoized we can use same Element refernce that is done by passing child component as children props
while using context make sure to wrap immediate child in memo or use same element reference


------------------------------------------------------




------------------------------------------------------




------------------------------------------------------




------------------------------------------------------

