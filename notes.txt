
001: Introduction
open source libraty for building user interfaces
not a framework
focused on ui
react is a component based architechture - reusability
react is declarative - tell it what you want snd it will build the actual ui
handle efficient updating and rendering of components
react native foe mobile applications

002:
create react applications
1 - npx
npx create-react-app foldername
cd foldername
npm start

npx is a npm package runner which gets install when we install node

2- npm
 npm install create-react-app -g
 create-react-app project name
we install createreact app package globally and then 

003-follder structure:
package.json: dependencies and scripts required for the file, some scripts to build start or even run the application
yalm-lock / package-lock :  ensure consistent installation of your dependemncies cross different machines.
node_modules : folder where all the dependencies where installed
public :
    manifest.json: progressive web applications
    favicon.ico:
    index.html: only html file , view dynamically change. we willnot the index.html maybge sometime the header. div tag with id=root will take over by  react that is responsible for all changes in ui
src:
    index.js: strating point for react aplication. we specdipy the root componenrt that is app component and dom element which will be controlled by react ie the element eith an id root that we say in index.html
              inside this root dom node app component is rendered. that leads to app.j
    app.js:represent the view we see in the browser
    app.css : for styling. contains classees which will be applied
    app.test.js : for testing. contains a simple test case
    index.css : applies style to the body tag
    logo svg : referenced in app.js
    reportWebVItals.js : for progressive web aps

index.html-> inex.js-> app.js-> html renderes

004-components:
component represent part of user interface
one for header, sidenav, main content, footer and one container to contain everythig ie root component
comppponents are reusable , same components can be used in differernt place . eg left sidenav can be used for right sidenav 
components can contain other componets , eg app componenrt contain other components
component code is placed inside javascript file, app coponent placed inside app.js|
component can be also placed with .jsx extension
componets are of two types:
    stateless functional component :
        literally js functions, returns html which describes the ui
         eg: function welcome(props){
            return <h1>Hello, {props.name}</h2>
         }

    stateful class componet: 
        regular es6 class that extends the componet class from library
        they must contain a render methos which in turn returns html 
        class Welcome extends React.Component(
            render(){
                return <h1>hello</h1>
            }
        )
componets render html using jsx, we can influencw what we render using props and states

005-functional components:
js functions that can optionally receives object of properties which is reffered to as props and returns html(jsx) which rerturns tthe ui
in components folder create a component with pascal case, for any component file first import react
use arrow function to define components

while importind and exporting componets using default will allow us to import using any names and then use that name in the  function
named export constant variable which is assigned with a function directly, import function uisng exact name and a curly braces 

006: class componets:
es6 classes that can optionally receives object of properties which is referred to as props and returns html(jsx) which returns the ui
it can maintain a private internal state, ie can maintain some info private to that component and use that info to describe user interface
for class componet we need two imports  ract and class component from react
extend componet class from react and implement a render methos which will return nul or html

COMPARISON:
functional: 
            use this as much as possible
            absence of this keyword
            solution without using state
            no complicated logic and mainly responsible for ui
            also called stateless/dumb/presentational

class:
        more feature rich
        maintain their own private data(state)
        complex ui logic 
        provide lifecycle hooks
        also called stateful/smart/container
007-hooks update:
hooks: are new feature lets you use state and other rect features without writing class, using this we can use states and lifecycle hooks in functional component

008-jsx:
javascript xml - extension to js language syntax
we write xml like code for elements and componets
jsx tags have tag name, attributes and children
not necesary but make your code simpler
it ultimatly transpiles to pure js which is understood by the browsers


const Hello = ()=>{
    // return <div>
    //     <h1 id="head" className="head-class">JSX</h1>
    // </div>

    return React.createElement('div',null,React.createElement('h1',{id:'head',className:'head-class'},'without JSX')) // parameters are string that specifies html tag to be rendered , second parameter any additional properties, thirs parameter children for the html tag, giving it directly willl only give it as a parameter also wont work so add a new react create element
                                                                                        // second parameter is an object of key vallue pais that we want to apply to parameters, if we want give class name use className as key because class i s a reserved keywors in js
}

use react library while using jsx to do it simpler way

Differences from regular html:
    class =  className
    for = htmlfor
    camelcase property naming : onclick = onClick, tabindex = tabIndex

009-props:
 props shortform of  property is the optional input a component can accept, allows the component to be dynamic
 pass a cariable from render app componet to greet compnet and use that inn the browser
 we specify props as attributes, to specify name propertyy we give name attribute
 in greet component add parameter to functional componet (props conventional way)
 we can render named properties or unknwon properties. unknown properties or html contents we want to pass is givven as component definition and  are rendered using reserved child property give them between opening and closing tags where the compnent is called and use it using props.children
 we can only return one html content sop if you want to return multiple things you need to wrap them all in one div

 we can pass values for class component in the same way, but we have to use it using this.props.attribitename

 react bundles all the attributes we specify into an object bundle and we call it as props,
 props are immutable

 010- state:
 like props second way  to implement what is rendered on the screen is state
 props vs state
 props:
        passed to the componernt
        function parameters
        props are immubale (parents owns it and cannot be changed)
states:
        managed within the component
        variables declared in the function body
        state can be changed( it is within the componet so full controll to change)



