
001: Introduction
open source libraty for building user interfaces
not a framework
focused on ui
react is a component based architechture - reusability
react is declarative - tell it what you want snd it will build the actual ui
handle efficient updating and rendering of components
react native foe mobile applications

002:
create react applications
1 - npx
npx create-react-app foldername
cd foldername
npm start

npx is a npm package runner which gets install when we install node

2- npm
 npm install create-react-app -g
 create-react-app project name
we install createreact app package globally and then 

003-follder structure:
package.json: dependencies and scripts required for the file, some scripts to build start or even run the application
yalm-lock / package-lock :  ensure consistent installation of your dependemncies cross different machines.
node_modules : folder where all the dependencies where installed
public :
    manifest.json: progressive web applications
    favicon.ico:
    index.html: only html file , view dynamically change. we willnot the index.html maybge sometime the header. div tag with id=root will take over by  react that is responsible for all changes in ui
src:
    index.js: strating point for react aplication. we specdipy the root componenrt that is app component and dom element which will be controlled by react ie the element eith an id root that we say in index.html
              inside this root dom node app component is rendered. that leads to app.j
    app.js:represent the view we see in the browser
    app.css : for styling. contains classees which will be applied
    app.test.js : for testing. contains a simple test case
    index.css : applies style to the body tag
    logo svg : referenced in app.js
    reportWebVItals.js : for progressive web aps

index.html-> inex.js-> app.js-> html renderes

004-components:
component represent part of user interface
one for header, sidenav, main content, footer and one container to contain everythig ie root component
comppponents are reusable , same components can be used in differernt place . eg left sidenav can be used for right sidenav 
components can contain other componets , eg app componenrt contain other components
component code is placed inside javascript file, app coponent placed inside app.js|
component can be also placed with .jsx extension
componets are of two types:
    stateless functional component :
        literally js functions, returns html which describes the ui
         eg: function welcome(props){
            return <h1>Hello, {props.name}</h2>
         }

    stateful class componet: 
        regular es6 class that extends the componet class from library
        they must contain a render methos which in turn returns html 
        class Welcome extends React.Component(
            render(){
                return <h1>hello</h1>
            }
        )
componets render html using jsx, we can influencw what we render using props and states

005-functional components:
js functions that can optionally receives object of properties which is reffered to as props and returns html(jsx) which rerturns tthe ui
in components folder create a component with pascal case, for any component file first import react
use arrow function to define components

while importind and exporting componets using default will allow us to import using any names and then use that name in the  function
named export constant variable which is assigned with a function directly, import function uisng exact name and a curly braces 

006: class componets:
es6 classes that can optionally receives object of properties which is referred to as props and returns html(jsx) which returns the ui
it can maintain a private internal state, ie can maintain some info private to that component and use that info to describe user interface
for class componet we need two imports  react and class component from react
extend componet class from react and implement a render methos which will return nul or html

COMPARISON:
functional: 
            use this as much as possible
            absence of this keyword
            solution without using state
            no complicated logic and mainly responsible for ui
            also called stateless/dumb/presentational

class:
        more feature rich
        maintain their own private data(state)
        complex ui logic 
        provide lifecycle hooks
        also called stateful/smart/container
007-hooks update:
hooks: are new feature lets you use state and other rect features without writing class, using this we can use states and lifecycle hooks in functional component

008-jsx:
javascript xml - extension to js language syntax
we write xml like code for elements and componets
jsx tags have tag name, attributes and children
not necesary but make your code simpler
it ultimatly transpiles to pure js which is understood by the browsers


const Hello = ()=>{
    // return <div>
    //     <h1 id="head" className="head-class">JSX</h1>
    // </div>

    return React.createElement('div',null,React.createElement('h1',{id:'head',className:'head-class'},'without JSX')) // parameters are string that specifies html tag to be rendered , second parameter any additional properties, thirs parameter children for the html tag, giving it directly willl only give it as a parameter also wont work so add a new react create element
                                                                                        // second parameter is an object of key vallue pais that we want to apply to parameters, if we want give class name use className as key because class i s a reserved keywors in js
}

use react library while using jsx to do it simpler way

Differences from regular html:
    class =  className
    for = htmlfor
    camelcase property naming : onclick = onClick, tabindex = tabIndex

009-props:
 props shortform of  property is the optional input a component can accept, allows the component to be dynamic
 pass a cariable from render app componet to greet compnet and use that inn the browser
 we specify props as attributes, to specify name propertyy we give name attribute
 in greet component add parameter to functional componet (props conventional way)
 we can render named properties or unknwon properties. unknown properties or html contents we want to pass is givven as component definition and  are rendered using reserved child property give them between opening and closing tags where the compnent is called and use it using props.children
 we can only return one html content sop if you want to return multiple things you need to wrap them all in one div

 we can pass values for class component in the same way, but we have to use it using this.props.attribitename

 react bundles all the attributes we specify into an object bundle and we call it as props,
 props are immutable

 010- state:
 like props second way  to implement what is rendered on the screen is state
 props vs state
 props:
        passed to the componernt
        function parameters
        props are immubale (parents owns it and cannot be changed)
        acessed uisng props(functional component) and this.props(class component)
states:
        managed within the component
        variables declared in the function body
        state can be changed( it is within the componet so full controll to change)
        acessed using useState Hook(functional) and this.state(class)

it is a object priatly maintained inside the container


011-setState:
if we try to do increment and display it without using set state the value wont update in the ui but the value will be changed in the console
this is because we are not rerendering the page after every increment, so never modify state directly, use setstate
when we edit state directly react wont know it wont render it on the ui , so render using setState
calls to setstate are asynchronous, there are many codes that we want execute after implementing this setstate, to handle such situation there is callback function .
setState accepts a second parameter ie a callback function. first parameter is the state object second parameter is the callback function.call back function will be an arrow function

if i call increment five times at once , react will group this multiple setstate statements into a single update for better performance. herre all setstate are done in on single go and updated var;lues didint carry over between different calls
when we want to update state based on previous state instead of  passing object we need to pass function as arguments. use arrow function and take previous state as parameter and use that to update instead of using current state
second parametrer to this function is props .


012-destructuring props and states:
destructuring props in functional compom=nent:
first way :instead of using props as parameter and using promps.name or promps.lsatname we can use paraments like {name,last} and use it directly 
export const Greet = ({name,last}) => {
    return (
        <div>
            <h1>Hello, functional componet {name} {last}</h1>
            {children}
        </div>
    )
}
same as {props.name,props.last}

second way: destructure inthw functon 
export const Greet = props => {
    const {name,last} = props
    return (
        <div>
            <h1>Hello, functional componet {name} {last}</h1>
    
        </div>
    )
}
destructuring in class components:
while destructuring promps or states it is usually done inside render method 
props can contain different properties we can destructure the only ones we want
class Welcome extends Component{
    render(){
        const {name,last} = this.props
        return <h1>Hello, class componet {name} {last} {children}</h1>
    }
}


this is how destructuring works for states in class components
        const {state1,state2} = this.state

013-event  handling:
when user interacts with components events are happend

react events are named using camelcase
instead of passing it like string we are passing it inside {}
after that inside functional component define your onclick function\
on event handling cal function as reference dont call directly if you call it as function call it as a function and return it
event handler is a function not a function call 
rfce: shortcut for creating reacr functional componenets
rce : to create class component
rconst : create constructor
in class componet methods are acessed using this keyword

014-binding event handlers: 
this works on event handlers if we use the arrow function in JSX which keeps this from being lost.
when you pass a method as a callback like an event handler the value of this inside mthod depends on how they are called 
When the button is clicked, this.increment is called by the event system, not by your class instance — so this will be undefined in strict mode (which React uses).

1st way:
    <button onClick={this.change.bind(this)}>event bind</button> 
 here every u pdate to the state will cause to re render,it will be trouble for components that comtain nested components
2nd way:
use arrow function
        <button onClick={()=>this.change()}>event bind</button>
we are calling calling and returning the value so parenthesis is needed
3rd way:
official approach
constructor(props) {
      super(props)
    
      this.state = {
         message:'event binding'
      }
    this.change = this.change.bind(this)

    }
binding in constrructor
4th way:
  change = ()=>{
        this.setState({
            message:'done'
    })
    console.log(this)
    }



015-methods as props-
when th eparent wants to communicate with child we use props
when the child wants to communicate with parent we still use props: we pass in a reference to a method as props to the child
here we want to acess the parents method in child componet
        <ChildComponent geetHandler ={this.greetparent}/>

we pass the methos as props here
passing parameter when calling the parent mr=ethod from child arrow function is used
      <button onClick={()=>props.geetHandler('child')}>Greet Parent</button>
now we can pasdd any number of parameters
wecan padd this as destructuring too

// 016: conditional rendering:
// -if else:
// if else is ame as in js , 
// it wont work inside jsx

    // if(this.state.isLogged){
    // return (
    //   <div>
    //     welcome josna
    //   </div>
    // )
    // }
    // else{
    //     return(
    //         <div>
    //             welcome guests
    //         </div>
    //     )
    // }

// -element variables:
// we use js variables to store Elements    
 // let message
    // if(this.state.isLogged){
    //     message = 'welcome josna'
    // }
    // else{
    //     message = 'welcome guests'
    // }
    // return <div>{message}</div>

// -ternary condiotional operator
 // return(
    //     this.state.isLogged? <div>Welcome Josna</div> : <div>Welcome Guests</div>
    // )

// -short circuit operator
// specific case of ternary operaotor
// when we want to render either somethinf or noothing we use render method
// return this.state.isLogged && <div>Welcome Josna</div>



017- List rendering:
using map method we ca niterate through each element and perform operation on each of then and  return values
map mehod is js code so it needs to be evaluated so give it in curly braces
i fwe want we can move out the list rendering logic and make return statement simple 
refractor the jsx in seperate conponent while using an array of obkjects or so : component extraction for list rendering.
When you render lists in React, often each item becomes repetitive JSX. 
Instead of writing all the JSX inside the .map(), you can extract that JSX into a separate component and reuse it. 

018- list and keys:
 each item in the list rendered using map operator should have a prop called key and value to key should be unique.
 typically id of the item is a great choice for key prpop value
 it can be anything but it should be unique
 kwy prop is not accessible inn the child component, if we try to acss it it will be undefined
 key prop is something reserved so i fwe want to use it pass it as someyhting else
  keys help to identify react wwhich item is added removerd etc
  react doesn’t just throw away and re-create DOM nodes every time.           
Instead, it tries to re-use and update existing DOM efficiently (for speed).
To do that, React needs a way to identify which item is which when the list changes.

when we dont have id property we use index of the aray as keys

019-index as a key antipattern -
   uisng index as key will make many performance issues
  when to ise index as a key:
  the items dont have a unique id
  the list is statuc and wont change
  the list will never be reordered or filtered

020- stling and css basics:
 1.css StyleSheetList
 in seperate css file we can style using classname and apply these to our html by impoting
multiple class names are given using template strings refer eg
export default function StyleSheets20(props) {
    const className = props.isClass ? 'primary' :''
  return (
    <div>
      <h2 className={`${className} font-xl`}>Styling</h2>
    </div>
  )
}

 2.inline styling
it is specified using a object whose keys are camel cased version of normal styling. 
import React from 'react'

export default function InlineStyling20() {
    const headStyle = {
        fontSize : '100px',
        color : 'blue'
    }
  return (
    <div>
      <h2 style={headStyle}>Inline</h2>
    </div>
  )
}

 3.css modules
file name must be suffixed with .modules.css
A special .module.css file → styles are automatically scoped locally to the component.
wile using regular css it is spplieed to every chind components may leads to css comflics
css modules cannot be used like this because we reference the class name using style parameter

 4.css in js libraries